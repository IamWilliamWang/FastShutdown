<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBoxUpdateLog.Text" xml:space="preserve">
    <value>当前版本：{Version}
更新日志：
1.0:菜单栏基本选项构建完成，支持关机、重启、取消指令、退出
1.0.1:栏内增加了自定义选项，可以通过自定义选项设置任意的关机时间；增加了退出按钮
1.0.2:修复了自定义选项内只支持输入整形的问题
1.1:增加了程序的主题界面。可通过主界面完成之前的操作
1.2:增加了强大的右键功能。主界面右键包含【透明度，任务栏显示，退出】和确认键右键【注册关机事件，销毁关机事件，打开启动文件夹】
1.2.1:将“任务栏显示”功能改为“隐匿”功能。主程序的界面显示改为默认不隐匿
1.2.2:修复因权限不足导致注册事件失败。增加菜单栏右键【应用App】
1.2.3:防止误触立即关机
1.3:增加定时关机，用户可选择要关机的具体时间，而不是倒计时多少分钟
1.3.1:修复1.3的错误，增加菜单右菜单增加【帮助】
1.3.2:增加了开发者模式，将【帮助】移至主界面
1.3.3:取消防误触功能，Enter键可以代替确认按钮，q键取消任务，Esc键可以退出
1.4:改善弹窗外观，修复IME模式禁止出现中文
2.0:添加记录开关机的功能。新建全新的管理界面
2.1:关机可以计算时长并记录，计算当天次数。修复了时间插入失败的问题
2.2:开机程序修复并大大优化速度。
2.3:支持数据的全部导出到excel功能
2.6:可以统计出每个月使用的累计时间，调整数据库管理的界面与菜单
2.7:滚轮操作支持，支持在面板内更新数据
2.8:标题显示时间，修改管理器启动按钮
3.0:统计窗体全面升级，软件全面翻新
3.1.4:备份还原功能完美实现，性能优化
3.1.6:添加了开发者模式，可以直接使用SQL语句管理数据库（仅限开发者用户）
3.2:使用多线程实现了软件零卡顿，实现了终端模式
3.2.5:开启数据库日志功能
3.3:添加了日志管理
3.3.1:增加数据库稳定性
3.3.5:增加了报告错误的窗体，便于检查与反馈错误
3.5:增加了休眠模式，主页可以方便的插入开机时间
3.5.1:正式改名为关机助手，修复因卡顿产生的错误
3.5.2:查询功能微调，报错窗口微调
3.5.4:添加删除任意条记录的功能
3.5.5:增加延缓模式，可以储存真正关机的时间
3.6:数据可视化界面添加开关机时间分析，并将该界面微调
3.6.2:支持界面最大化，查询功能由查询10条改为15条
3.7:将数据库文件导向至软件所在文件夹，添加了欢迎页面与自动初始化的功能，数据管理页面微调
3.7.1:修复日志管理中可能存在数据量过大而产生的数值溢出的问题
3.7.2:数据可视化默认图形改变，优化开发者模式
3.7.3:当执行需要管理员权限的操作，程序可以询问后自己获取管理员权限
3.8:主界面隐藏不常用功能，并将退出改为显示拓展功能。日志窗口设置为不可变长宽。重启时不再调用开机启动程序，节省系统资源也省去需要手动删除记录的操作。
3.8.1:手动添加关机时间后，选择填充空处可以进行填充时长栏。改进异常处理
3.9:增加了注释管理器，可以对单条数据进行添加和修改注释。数据管理界面调整
3.9.1:主界面快捷栏调整。管理员选项中增添查看数据库连接文件和状态的选项。删除全部功能完善
3.9.2:修复了选择休眠状态下滚动鼠标报错的问题，增添了针对报错框的调试功能（强制报错）
3.9.3:首次在主管理窗口中添加“添加一条关机记录”，错误弹窗能显示更全面的信息
3.9.4:支持了使用winrar进行数据库备份的功能
3.9.5:界面细节优化，注释管理器添加选项卡清爽界面，优化显示信息
3.9.6:对主界面添加拓展功能动画，注释管理器的修改功能问题修复
3.9.7:注释管理器会判断序号是否合法。将mdf数据库文件拖入主页面可以载入该数据库而不是载入默认数据库。
3.10:注释管理器使用Unicode编码技术支持中文输入。数据库相关代码重构
3.10.1:注释管理器修复了Unicode显示异常的问题，不再对非中文字符进行转化。并对确认修改功能作出相应的调整
3.10.2:分析界面切换到分析时间分布时不再重置图像为柱状图。并修复了初始化数据库不可用的问题。
3.10.3:对于硬盘速度较慢的用户，在日志管理内提供合理建议以提高软件使用速度。
3.10.4:主界面菜单栏调整，界面提示修改，删除不必要的部分。异常处理窗口可快捷退出。
3.10.5:分析界面表格部分中文化，主界面过渡效果更自然
3.10.6:支持使用RAR备份文件还原数据库，Copyright。
3.10.7:备份文件进行特殊加密，在主页可以释放数据库
3.10.8:重启功能自动取消记录关机时间，在管理界面也可以使用终端版本的关机助手
3.10.9:管理员选项可以设置系统休眠状态
3.11:代码优化，主界面添加获得管理员权限功能、添加离线模式（不使用数据库）
3.11.1:注释管理器支持最大化，管理窗口更新完数据自动刷新显示的数据
3.11.2:重启时不再一律不记录下次开机时间而是根据用户勾选而定，提供自定义sql脚本的运行功能(beta)，修复异常窗口退出后程序还在执行的问题
3.11.3:主界面添加睡眠功能。内部流程统配修复了用户名不一样产生的错误。代码优化
3.11.4:在主界面添加了临时禁止开机记录时间功能。自定义sql脚本运行交互完善(beta)，使用sqlite数据库加速访问速度(beta)
3.11.5:修复了部分表格宽度过短导致显示不全的问题，自定义数据库改为外链数据库，在主右击菜单增加外链数据库按钮，并整理了右击菜单内容。最后调整异常处理窗体的逻辑，显得不那么混乱。
3.12:数据显示方式不使用默认格式，更加美观自然，而且程序会根据内容自动调整到最佳的显示状态，不会有内容显示不全。还修复了注释管理器刷新后界面变乱的问题。
4.0:(测试版本)休眠和待机功能首度支持定时执行。采用缓存技术使主窗口操作速度普遍提升95%，并能在管理主窗口显示清除缓存的进度、查看缓存文件。数据库首次实现了所有系统的适配，所有用户可以享受同样的体验。数据表格都可以显示行索引了。
4.0.1:安全模式加固，完全阻断连接保证离线状态，安全模式支持可逆操作。改善缓存查看功能，增添编辑缓存功能。重整管理主界面的管理员选项。修复了不同版本下数据库插入格式不一导致崩溃，修复了系统时钟格式不同导致的首页时间显示异常，数据可视化画图日期混乱问题。修复了由于不同的系统时钟格式，数据表刷新后每列宽度混论问题。管理主窗口支持拖拽大小，并支持在任意一次刷新后根据内容调整各列的宽度功能。外链数据库快捷功能加入防误拖拽功能。防重复启动功能修改。注释管理器去掉HeaderCell的干扰索引号。数据可视化增快速度。
4.0.2:紧急修复无法插入开机记录的问题，增添缓存功能异常报警。
4.0.3:缓存显示编辑部分代码重构，所有相关功能可视化并移到高级功能选项卡。显示功能支持精准查找显示。
4.0.4:隐秘功能去除。连接数据库后离线功能禁用。主窗口行号宽度、界面宽度自适应。
4.0.5:细节措辞修改。缓存管理在安全模式下不可提交到数据库。
4.1:全体代码重构，过时代码全去除。注册关机事件增加失败提示。获取管理员权限功能修复，重启后不会有重复提示。数据管理任务栏提示局右。InputBox重写，更美观。休眠窗口不重要已移至Util。当大小保持原视时，数据展示自动拓宽/缩小窗体宽度。精准查找放错处理。
4.1.1:InputBox添加DedaultText和提示功能，优化InputBox界面，修复由默认字段产生的报错问题。
4.1.2:补丁程序1.2版本加入主界面右键菜单，并改名为缓存生成与合并。将缓存管理移至主界面右键菜单，重命名为缓存编辑。二者合并为缓存管理。在主界面进行缓存管理解决了每次都要进行安全模式才能管理缓存的尴尬。
4.1.3:内化补丁程序1.3版本，CacheUtil增添自定义缓存文件方法
4.1.4:安全模式降耦，当安全模式开启时在高级选项中有停用安全模式按钮，按下可关闭安全模式状态。修复了任何在数据库打开后仍能开启安全模式的漏洞。提升安全模式切换执行速度。
4.1.5:为了降低不必要的操作，补丁程序所有功能成功合并至缓存管理器。清理缓存功能提供空文件、文件不存在提示。找不到缓存文件不再弹窗提示。
4.1.6:重新整理SqlConnectionAgency内部函数，重命名为DatabaseAgency，并增加其使用率。
4.1.7:修复了InputBox设定默认字串情况下自动清除文字的问题，数据可视化大小可调。缓存管理添加ScrollBar。
4.2:历史版本号简化，去除三级.0。主界面删除最小化按钮，布局更宽阔。主界面支持dark mode。命令行版本大更新至2.0.1。修复延缓功能不支持缓存的问题

以下功能尽情期待:
通过无法打开的数据文件找回原数据；提供序号重建功能，使序号重新连续；序号修改功能；首页点击拓展功能没有黑色阴影</value>
  </data>
  <data name="textBoxUpdateLogCommandVersion.Text" xml:space="preserve">
    <value>当前版本：2.0.1
1.0:可以进行快捷关机与快捷取消
1.1:可以自定义输出以及添加了按分计时的关机选项
1.2:增添真正关机时间记录并关机的选项
1.3:支持开机记录
1.3.1:解决了提示框显示过快问题
1.4:支持指定数据库文件功能
1.5:支持主页面的休眠功能，帮助文档全面优化，修复输出功能问题
1.6:对开机记录功能使用了缓存加速，速度提升95%
1.6.1:参数防缺失处理
1.7:dbFilename不再作为调用附加选项，而是单独提出来变为-db
2.0:修改调用接口，休眠变为-h，增加睡眠功能。合并-s和-m。完善帮助描述，添加全名称选项。所有功能支持操作指定数据库、指定缓存或切换为离线模式。
2.0.1:添加了缓存显示和删除功能</value>
  </data>
</root>